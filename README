SECTION 1:______

Michael Janusa mjjanusa@yahoo.com          (with permission from Prof. Dahlin for extra time)
Chinedu Egboh  tobe_egboh@mail.utexas.edu  (with permission from Prof. Dahlin for extra time)

SECTION 2:______

New source files for Hierarchical File System Lab

RFS.java: Add a Hierarchial File System layer on tipe of the flat fs.  This allows for files to be written via a path and allows directories to be created.   

RFSUnit.java:  main method runs tests on rfs.java

DirEnt.java: directory file structure.  Maintains list of children and other data regarding a directory.  Can create new directory or create directory from meta data and file data from disk.  Exports a directory as a byte array of meta data and byte array of file data.   

SECTION 3:_____
Our high level design relied heavily on the flat fs for managing files and used a light directory file to wrap things together. The directory contains a list of its child directories and files-- this is made up by two lists a list of names and a list of inodes.  
Functions move through the tree by reading a directory and getting the inode of the next appropriate node then loading the next directory until it hits the desired file / directory.  Directories have 3 specific char tags in the meta data of the files to identify them as directories. 
File Descriptors consist of two arrays one entry for each allowed file discriptor.  One for the transID of that file descriptor and one for the inode of a file descriptor.  An unused file descriptor has an innode of -1.  
Read and writes simply occur by looking up the innode and trans id for a file descriptor and executing the read/write on flat fs below it with this data.  
Rename assumes the new file name is of the same directory as the old file name.  All functions that can be incorrectly called and return a value return -1 when an error occurs.  

SECTION 4:_____
RFS ensures that updates are atomic by managing transactions.  All transactions are begun and ended within one function to ensure atomicity with the exception of open / read / write.  These 3 functions ensure atomicity by using the transID from the corresponding File Descriptor used to call the function. 
When that file descriptor is closed, the transaction is committed ensuring all the updates form the reads and writes to that file were issued atomically.  

SECTION 5:_____




